@page "/multimedia"
@using System.Text.Json
@using System.Text.Json.Serialization
@using System.Net.Http
@using System.Net.Http.Json
@inject HttpClient Http
@inject IHttpClientFactory ClientFactory
@attribute [StreamRendering]

<h1>Мультимедийное оборудование</h1>

@if (multimediaEquipments == null)
{
	<p>Загружаем данные</p>
}
else
{
	<a class="btn btn-outline-dark create-link" href="multimedia/create">Создать новую запись</a>
	<table class="table">
		<thead>
			<tr>
				<th>Название</th>
				<th>Описание</th>
				<th>Инв. номер</th>
				<th>Модель</th>
				<th>Аудитория</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var multimediaEquipment in multimediaEquipments)
			{
				<tr>
					<td>@multimediaEquipment.name</td>
					<td>@multimediaEquipment.description</td>
					<td>@multimediaEquipment.inv_number</td>
					<td>@multimediaEquipment.model</td>
					<td>@multimediaEquipment.Auditory.name</td>
					<td><a href="multimedia/update/@multimediaEquipment.guid"><button class="btn btn-light"> Изменить </button> </a></td>
					<td><button class="btn btn-light" @onclick="(() => Delete(multimediaEquipment.guid))">Удалить</button></td>
				</tr>
			}
		</tbody>
	</table>
}

@code {
	private IEnumerable<Model.MultimediaEqument>? multimediaEquipments = [];
	private string? serviceEndpoint;

	protected override async Task OnInitializedAsync()
	{
		multimediaEquipments = await Http.GetFromJsonAsync<IEnumerable<Model.MultimediaEqument>>("https://localhost:7264/api/multimedia/");
	}

	protected async void Delete(Guid guid)
	{
		var response = await Http.DeleteAsync("https://localhost:7264/api/multimedia/" + guid);
		if (response.IsSuccessStatusCode)
		{
			await OnInitializedAsync();
			StateHasChanged();
		}
		else
		{
			Console.WriteLine("Error");
		}

	}
}
