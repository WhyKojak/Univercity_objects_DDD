@page "/computer"
@using System.Text.Json
@using System.Text.Json.Serialization
@using System.Net.Http
@using System.Net.Http.Json
@inject HttpClient Http
@inject IHttpClientFactory ClientFactory
@attribute [StreamRendering]

<h1>Компьютеры</h1>

@if (computers == null)
{
    <p>Загружаем данные</p>
}
else
{
    <a class="btn btn-outline-light" href="auditory/create">Создать новую запись</a>
    <table class="table">
        <thead>
            <tr>
                <th>Название</th>
                <th>Описание</th>
                <th>Инв. номер</th>
                <th>Аудитории</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var computer in computers)
            {
                <tr>
                    <td>@computer.name</td>
                    <td>@computer.description</td>
                    <td>@computer.inv_number</td>
                    <td>@computer.Auditory.name</td>
                    <td><a href="auditory/update/@computer.guid"><button class="btn btn-light"> Изменить </button> </a></td>
                    <td><button class="btn btn-light" @onclick="(() => Delete(computer.guid))" >Удалить</button></td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private IEnumerable<Model.Computer>? computers = [];
    private string? serviceEndpoint;

    protected override async Task OnInitializedAsync()
    {
        computers = await Http.GetFromJsonAsync<IEnumerable<Model.Computer>>("https://localhost:7264/api/computer/");
    }

    protected async void Delete (Guid guid) 
    {
        var response = await Http.DeleteAsync("https://localhost:7264/api/computer/" + guid);
        if (response.IsSuccessStatusCode) 
        {
            await OnInitializedAsync();
            StateHasChanged();
        } else 
        {
            Console.WriteLine("Error"); 
        }

    }
}
